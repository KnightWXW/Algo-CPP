




// 在平时的网页中，我们经常看到信息内容通过分页来展示，分页器通常会根据我们的当前页码显示不同的页码按钮，用来引导用户翻页。下图所示的分页器，总页数为64（首页码为1，尾页码为64），最大显示宽度为9，当前页码为9
// 显示宽度为页码按钮和...的数量，...表示页码不连续。
// 给定总页数、最大显示宽度、当前页码，请模拟输出分页器的显示形态：
//  总页数小于等于最大显示宽度时，显示与总页数相等的按钮
//  总页数大于最大显示宽度时，需依次符合下面条件：
// 1)        显示按钮与...的数量之和等于最大显示宽度。
// 2)        第一个和最后一个按钮固定显示首尾页码，当前页码的按钮一定显示（可能是首尾页码按钮）。
// 3)        当且仅当首页或尾页与相邻按钮的页码不连续时，需使用...间隔。
// 4)        除首、尾、当前页外，其它按钮显示与当前页码前后连续的页码：
//  选择当前页码的前面按钮数与后面按钮数的差值的绝对值最小的方案；
//  如果差值最小有多个方案，选择前面按钮数多的方案。
//  显示按钮按页码从小到大排列

// 输入
// 三个正整数 pageCount maxWidth currentPage，分别表示总页数、最大显示宽度、当前页码
// 2 <= pageCount <= 1000, 5 <= maxWidth <= 10, 1 <= currentPage <= pageCount
// 输出
// 一个字符串，表示分页器的显示形态，用单空格间隔页码与...
// 样例
// 输入样例 1
// 7 6 4
// 输出样例 1
// 1 ... 3 4 ... 7
// 提示样例 1
// 首页1、尾页7、当前页4，一定显示。
// 当前页前面按钮数与后面按钮数差值最小的方案有两种：1 … 3 4 … 7 或 1 … 4 5 … 7 ，选择前面按钮数多的方案。
// 其他方案，比如：1 2 3 4 … 7 的当前页前面按钮数（3个）与后面按钮数（1个）的差值不是最小； 1 … 3 4 5 7 的尾页7与相邻按钮的页码5不连续时没有 …
// 输入样例 2
// 8 7 5
// 输出样例 2
// 1 ... 4 5 6 ... 8
// 提示样例 2
// 首页1、尾页8、当前页5，一定显示。 首页和尾页都与相邻按钮的页码不连续，使用 … 。 当前页前后按钮数相差最小（为0）。
// 错误答案如 1 … 4 5 6 7 8 ，该方案的前后按钮数相差 1
// 输入样例 3
// 7 6 5
// 输出样例 3
// 1 ... 4 5 6 7
// 提示样例 3
// 当前页前后按钮数相差最小（为0）
// 错误答案如 1 … 4 5 … 7 ，该方案的前后按钮数相差 1
// 输入样例 4
// 5 10 3
// 输出样例 4
// 1 2 3 4 5
// 提示样例 4
// 最大显示宽度足以显示所有页码，按实际页码数显示



string DisplayPages(int pageCount, int maxWidth, int currentPage)