

//      题目描述:
//      某公司需要租车出游，该公司有若干个部门depts, depts[i]表示第i个部门的人数，
//      每个部门只能坐一辆车。有若干租车公司提供了租车计划plans，
//      plans[i]代表第i个公司的租车计划。
//      plans[i][j]为第i个租车公司提供的第j类型车所能乘坐的人数
//      （注：每种类型的车不限量）。现请你选择租车计划，使得空座位最少。
//      若有多个最少空座位租车计划，选择plans中下标最小的租车计划。
//      若没有合适租车计划，输出-1。
//      示例1：
//          输入：depts=[10,8,15],plans=[[8,15,12],[20,4,15,4],[15,8]]
//          输出：0
//          用例描述：共有3个部门，每个部门的人数为15,8,10
//          有3个租车公司提供的租车计划。
//          选第0个公司，空座位：(12-10)+(8-8)+(15-15)=2;
//          选第1个公司，空座位：(15-15)+(15-10)+(15-8)=12;
//          选第2个公司，没有车辆可以装载第2部门的人，故不适合。
//      示例2：
//          输入：depts=[12,15],plans=[[10,12],[5,4,4],[10]]
//          输出：-1
//      示例3：
//          输入：depts=[10,8],plans[[9,11],[12,8]]
//          输出：0
//      提示：
//          1<=depts.length,depts[i]<=1000
//          1<=plans.length<=1000
//          1<=plans[i].length<=1000

int RentCars(vector<int> depts, vector<vector<int>> plans);